  # Demo pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(TeamProject).$(BuildDefinitionName).$(SourceBranchName).$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - master
    - features/*

pool:
  name: 'private'
  
variables:
  Tf.ConfigurationDirectory: '$(System.DefaultWorkingDirectory)/tests'
  Subscription: 'MSDN Enterprise'
  Tf.ResourceGroup: 'tfstate'
  Tf.StorageAccount: 'tfdemo001'
  Tf.Container: 'tfstate'
  Tf.Key: 'build'

jobs:
- job: BuildPipeline
  timeoutInMinutes: 10
  displayName: 'Build Pipeline'
  steps:
  
  - powershell: 'Install-Module -Name Pester -Force -SkipPublisherCheck -verbose'
    displayName: 'Update Pester'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: 'Install Terraform 0.12.18'
    inputs:
      terraformVersion: 0.12.18

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    displayName: 'Terraform init'
    inputs:
      workingDirectory: '$(Tf.ConfigurationDirectory)'
      backendServiceArm: '$(Subscription)'
      backendAzureRmResourceGroupName: '$(Tf.ResourceGroup)'
      backendAzureRmStorageAccountName: '$(Tf.StorageAccount)'
      backendAzureRmContainerName: '$(Tf.Container)'
      backendAzureRmKey: '$(Tf.Key)'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    displayName: 'Terraform plan'
    inputs:
      command: plan
      workingDirectory: '$(Tf.ConfigurationDirectory)'
      environmentServiceNameAzureRM: '$(Subscription)'
      backendServiceArm: 'MSDN Enterprise'
      backendAzureRmResourceGroupName: '$(Tf.ResourceGroup)'
      backendAzureRmStorageAccountName: '$(Tf.StorageAccount)'
      backendAzureRmContainerName: '$(Tf.Container)'
      backendAzureRmKey: '$(Tf.Key)'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    displayName: 'Terraform apply'
    inputs:
      command: apply
      workingDirectory: '$(Tf.ConfigurationDirectory)'
      environmentServiceNameAzureRM: '$(Subscription)'
      backendServiceArm: 'MSDN Enterprise'
      backendAzureRmResourceGroupName: '$(Tf.ResourceGroup)'
      backendAzureRmStorageAccountName: '$(Tf.StorageAccount)'
      backendAzureRmContainerName: '$(Tf.Container)'
      backendAzureRmKey: '$(Tf.Key)'

  - task: raul-arrieta.terraform-outputs.terraform-outputs.terraform-outputs@0
    displayName: 'Terraform Outputs'
    inputs:
      workingDirectory: '$(Tf.ConfigurationDirectory)'
      variablePrefix: tests.

  - task: AzurePowerShell@4
    displayName: 'BDD Tests for Module'
    inputs:
      azureSubscription: '$(Subscription)'
      ScriptType: InlineScript
      Inline: |
        Invoke-Pester @{Path= '$(System.DefaultWorkingDirectory)/tests/ci/*.tests.ps1'; Parameters = @{ResourceGroupName = '$(tests.resource_group_name)'} } -OutputFile $(System.DefaultWorkingDirectory)/TEST-CI-Module.xml -OutputFormat NUnitXML -EnableExit      
      azurePowerShellVersion: LatestVersion

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: NUnit
    condition: always()

  - task: CopyFiles@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: 'Copy Files to Artifact folder'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        *.tf
        *.tfvars
        README.md        
        
      TargetFolder: '$(build.artifactstagingdirectory)/$(BuildDefinitionName)'
      preserveTimestamp: true
        
  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: 'Publish Artifact'
    inputs: 
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    displayName: 'Terraform destroy'
    inputs:
      command: destroy
      workingDirectory: '$(Tf.ConfigurationDirectory)'
      environmentServiceNameAzureRM: '$(Subscription)'
      backendServiceArm: 'MSDN Enterprise'
      backendAzureRmResourceGroupName: '$(Tf.ResourceGroup)'
      backendAzureRmStorageAccountName: '$(Tf.StorageAccount)'
      backendAzureRmContainerName: '$(Tf.Container)'
      backendAzureRmKey: '$(Tf.Key)'
    condition: always()      